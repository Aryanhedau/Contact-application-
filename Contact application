class ContactApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Contact Application")

        self.contacts = []
        self.create_widgets()

    def create_widgets(self):
        # Labels
        tk.Label(self.master, text="Name:").grid(row=0, column=0, padx=10, pady=5)
        tk.Label(self.master, text="Phone:").grid(row=1, column=0, padx=10, pady=5)

        # Entry widgets
        self.name_entry = tk.Entry(self.master)
        self.name_entry.grid(row=0, column=1, padx=10, pady=5)
        self.phone_entry = tk.Entry(self.master)
        self.phone_entry.grid(row=1, column=1, padx=10, pady=5)

        # Buttons
        tk.Button(self.master, text="Add", command=self.add_contact).grid(row=2, column=0, pady=10)
        tk.Button(self.master, text="Save", command=self.save_contacts).grid(row=2, column=1, pady=10)
        tk.Button(self.master, text="Delete", command=self.delete_contact).grid(row=2, column=2, pady=10)
        tk.Button(self.master, text="Update", command=self.update_contact).grid(row=2, column=3, pady=10)
        tk.Button(self.master, text="Arrange A-Z", command=self.arrange_contacts).grid(row=3, column=0, columnspan=4, pady=10)

        # Listbox for displaying contacts
        self.contact_listbox = tk.Listbox(self.master, width=40, height=10)
        self.contact_listbox.grid(row=4, column=0, columnspan=4, padx=10, pady=10)

    def add_contact(self):
        name = self.name_entry.get()
        phone = self.phone_entry.get()

        if name and phone:
            contact = f"{name} - {phone}"
            self.contacts.append(contact)
            self.update_contact_listbox()
            self.clear_entries()
        else:
            messagebox.showwarning("Warning", "Name and Phone cannot be empty!")

    def save_contacts(self):
        # In a real application, you would save contacts to a file or database
        messagebox.showinfo("Save", "Contacts saved successfully!")

    def delete_contact(self):
        selected_index = self.contact_listbox.curselection()

        if selected_index:
            del self.contacts[selected_index[0]]
            self.update_contact_listbox()

    def update_contact(self):
        selected_index = self.contact_listbox.curselection()

        if selected_index:
            name = self.name_entry.get()
            phone = self.phone_entry.get()

            if name and phone:
                contact = f"{name} - {phone}"
                self.contacts[selected_index[0]] = contact
                self.update_contact_listbox()
                self.clear_entries()
            else:
                messagebox.showwarning("Warning", "Name and Phone cannot be empty!")

    def arrange_contacts(self):
        self.contacts.sort()
        self.update_contact_listbox()

    def update_contact_listbox(self):
        self.contact_listbox.delete(0, tk.END)
        for contact in self.contacts:
            self.contact_listbox.insert(tk.END, contact)

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.phone_entry.delete(0, tk.END)

if __name__ == "__main__":
    root = tk.Tk()
    app = ContactApp(root)
    root.mainloop()
